CREATE DATABASE SIEUTHIDIENMAY
go
use SIEUTHIDIENMAY
-- Huyen Nguyen TYPES, MANUFACTURES, PRODUCTS
CREATE TABLE TYPES
(
ID INT NOT NULL PRIMARY KEY
,NAME NVARCHAR(50)
);

CREATE TABLE MANUFACTURES
(
ID INT NOT NULL PRIMARY KEY
,NAME NVARCHAR(50)
,DESCRIBE NVARCHAR(200)
);

CREATE TABLE PRODUCTS
(
ID INT NOT NULL PRIMARY KEY
,NAME NVARCHAR(50)
,IMG NVARCHAR(200)
,DESCRIBE NVARCHAR(200)
,PRICE MONEY
,TYPE_ID INT NOT NULL
,MANU_ID  INT NOT NULL
);

ALTER TABLE PRODUCTS ADD FOREIGN KEY(TYPE_ID) REFERENCES TYPES(ID)
ALTER TABLE PRODUCTS ADD FOREIGN KEY(MANU_ID) REFERENCES MANUFACTURES(ID)

-- Hoang
CREATE TABLE POSITION
(
ID INT NOT NULL PRIMARY KEY
,NAME NVARCHAR(50)
);

CREATE TABLE DEPARTMENT
(
ID INT NOT NULL PRIMARY KEY
,NAME NVARCHAR(50)
);

CREATE TABLE EMPLOYEES
(
 ID INT NOT NULL PRIMARY KEY
,USERNAME NVARCHAR(50)
,PASS NVARCHAR(50)
,NAME NVARCHAR(50)
,BIRTHDAY NVARCHAR(50)
,SALARY INT
,POSITION_ID INT NOT NULL
,DEPART_ID INT NOT NULL
);

ALTER TABLE EMPLOYEES ADD FOREIGN KEY(POSITION_ID) REFERENCES POSITION(ID)
ALTER TABLE EMPLOYEES ADD FOREIGN KEY(DEPART_ID) REFERENCES DEPARTMENT(ID)

-- Thanh Duy
GO
CREATE TABLE USERS
(
	ID INT NOT NULL PRIMARY KEY
	,USERNAME NVARCHAR(50)
	,PASS NVARCHAR(50)
	,EMAIL NVARCHAR(50)
	,PHONE NVARCHAR(50)
)

GO
CREATE TABLE SHOPCART
(
	ID INT NOT NULL PRIMARY KEY
	,USER_ID INT NOT NULL
	,PRODUCT_ID INT NOT NULL 
)

GO
CREATE TABLE INVOICE
(
	ID INT NOT NULL PRIMARY KEY
	,NGAYBAN DATE
	,USER_ID INT NOT NULL
	,PRODUCT_ID INT NOT NULL 
	,EMPLOYEE_ID INT NOT NULL
)

GO
CREATE TABLE FEEDBACK
(
	ID INT NOT NULL PRIMARY KEY
	,TITLE NVARCHAR(50)
	,DESCRIBE  NVARCHAR(50)
	,USER_ID INT NOT NULL
)

-- SHOPCART FOREIGN KEY
ALTER TABLE SHOPCART ADD FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
ALTER TABLE SHOPCART ADD FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)

-- INVOICE FOREIGN KEY
ALTER TABLE INVOICE ADD FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
ALTER TABLE INVOICE ADD FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(ID)
ALTER TABLE INVOICE ADD FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(ID)

--FEEDBACK FOREIGN KEY
ALTER TABLE FEEDBACK ADD FOREIGN KEY (USER_ID) REFERENCES USERS(ID)


---------=== Huyen - STORE ===------------

--store ADD PRODUCT
go
CREATE PROC ADD_PRODUCT
(
 @ID INT 
,@NAME NVARCHAR(50)
,@IMG NVARCHAR(200)
,@PRICE MONEY
,@DESCRIBE NVARCHAR(200)
,@TYPE_ID INT 
,@MANU_ID INT
)
as
INSERT INTO PRODUCTS(ID, NAME,IMG , DESCRIBE, TYPE_ID, MANU_ID) 
VALUES (@ID, @NAME, @IMG, @PRICE, @DESCRIBE, @TYPE_ID,@MANU_ID)

--STORED UPDATE PRODUCTS
go
create proc UPDATE_PRODUCT
(
 @ID INT 
,@NAME NVARCHAR(50)
,@IMG NVARCHAR(200)
,@PRICE MONEY
,@DESCRIBE NVARCHAR(200)
,@TYPE_ID INT 
,@MANU_ID INT
)
as
update PRODUCTS 
set  
NAME = @NAME	
,IMG = @IMG 
,PRICE=@PRICE
,DESCRIBE =@DESCRIBE
,TYPE_ID =@TYPE_ID
,MANU_ID= @MANU_ID
where ID = @ID

--STORED DELETE PRODUCT
go
create proc DELETE_PRODUCT 
(
@ID INT
)
as
delete
from PRODUCTS
where ID=@ID

--STORE GET ALL PRODUCT
go
CREATE PROC All_PRODUCT
AS
 SELECT * FROM PRODUCTS
 
 --- chay thu chuong trinh
 -----CHEN MANUFACTURES, types de chay chuong trinh
INSERT INTO MANUFACTURES VALUES(1,'SAMSUNG','AAAAAA')
INSERT INTO MANUFACTURES VALUES(2,'APPLE','DDDDDD')

INSERT INTO TYPES VALUES (1,'DIEN THOAI')
INSERT INTO TYPES VALUES (2,'LAPTOP')
INSERT INTO TYPES VALUES (3,'TABLET')

-- chen san pham
EXEC ADD_Product 1,'samsung J7 Prime','3.jpg',2000000,'mot san pham moi',1,1
EXEC ADD_Product 2,'iphone X','2.png',2500000,'mot san pham moi cua apple',2,1
-- xem tat ca san pham
 exec All_PRODUCT

---------=== Hoang - STORE ===----------
--CHEN Position VA Department
INSERT INTO POSITION VALUES (2, 'Phan phoi')
INSERT INTO DEPARTMENT VALUES (3, 'Nhan vien')

--STORE Add Employees
go
create proc ADD_EMPLOYEE(@manv int, @tennv nvarchar(50),@ngaysinhnv date, @luongnv int, @username nvarchar(50), @pass nvarchar(50), @p_id int, @d_id int)
as
insert into EMPLOYEES values (@manv, @tennv, @ngaysinhnv, @luongnv, @username, @pass, @p_id, @d_id)

--STORE UPDATE EMPLOYEES
go
create proc UPDATE_EMPLOYEE(@id int, @tennv nvarchar(50),@ngaysinhnv date, @luongnv int, @username nvarchar(50), @pass nvarchar(50), @p_id int, @d_id int)
as
update EMPLOYEES
set ID = @id
,NAME = @tennv
,BIRTHDAY = @ngaysinhnv
,SALARY = @luongnv
,USERNAME = @username
,PASS = @pass
,POSITION_ID = @p_id
,DEPART_ID = @d_id 
where id = @id

--STORE DELETE EMPLOYEES
go
create proc DELETE_EMPLOYEE(@manv int)
as
delete
from EMPLOYEES
where ID=@manv

--STORE ALL EMPLOYEE
go
create proc ALL_EMPLOYEE
as
SELECT * FROM EMPLOYEES

--- chay thu chuong trinh
---- Them du lieu de chay thu store cua employee
INSERT INTO POSITION VALUES (1,'NHAN VIEN')
INSERT INTO POSITION VALUES (2,'BAO VE')
INSERT INTO POSITION VALUES (3,'QUAN LY')

INSERT INTO DEPARTMENT VALUES (1,'KINH DOANH')
INSERT INTO DEPARTMENT VALUES (2,'AN NINH')
INSERT INTO DEPARTMENT VALUES (3,'MARKETING')

--- chay store cua Employee
exec ALL_EMPLOYEE

---------=== Duy - STORE ===------------
-- STORED ADD USER
go
CREATE PROC ADD_USER
(
@ID INT 
,@USERNAME NVARCHAR(50)
,@PASS NVARCHAR(50)
,@EMAIL NVARCHAR(50)
,@PHONE NVARCHAR(50)
)
as
INSERT INTO USERS
VALUES (@ID,@USERNAME, @PASS, @EMAIL, @PHONE)

--STORED UPDATE USER
go
create proc UPDATE_USER
(
@ID INT 
,@USERNAME NVARCHAR(50)
,@PASS NVARCHAR(50)
,@EMAIL NVARCHAR(50)
,@PHONE NVARCHAR(50)
)
as
update USERS 
set  USERNAME= @USERNAME	
,PASS=@PASS
,EMAIL =@EMAIL
,PHONE=@PHONE
where ID = @ID

--STORED DELETE USER
go
create proc DELETE_USER
(
@ID INT
)
as
delete
from USERS
where ID=@ID

-- STORED GET ALL USER
go
CREATE PROC ALL_USER
AS
 SELECT * FROM USERS
 

-- STORE ADD INVOICE
 GO
 CREATE PROC ADD_INVOICE(@ID INT,@NGAYBAN DATE,@USER_ID INT,@PRODUCT_ID INT,@EMPLOYEE_ID INT)
 AS
 INSERT INTO INVOICE VALUES (@ID,@NGAYBAN,@USER_ID,@PRODUCT_ID,@EMPLOYEE_ID)
 
-- STORE UPDATE INVOICE
GO
CREATE PROC UPDATE_INVOICE(@ID INT,@NGAYBAN DATE,@USER_ID INT,@PRODUCT_ID INT,@EMPLOYEE_ID INT) 
AS
update INVOICE 
set  NGAYBAN = @NGAYBAN	
,USER_ID=@USER_ID
,EMPLOYEE_ID =@EMPLOYEE_ID
,PRODUCT_ID=@PRODUCT_ID
where ID = @ID

-- STORE DELETE INVOICE
go
create proc DELETE_INVOICE (@ID INT)
as
delete
from INVOICE
where ID=@ID

-- STORE ALL INVOICE
go
CREATE PROC ALL_INVOICE
AS
 SELECT * FROM INVOICE
 
---STORE ADD SHOPCART
go
CREATE PROC ADD_SHOPCART
(
@ID INT 
,@USER_ID INT 
,@PRODUCT_ID INT 
)
as
INSERT INTO SHOPCART
VALUES (@ID,@USER_ID, @PRODUCT_ID)

---STORE UPDATE SHOPCART
go
create proc UPDATE_SHOPCART
(
@ID INT 
,@USER_ID INT 
,@PRODUCT_ID INT 
)
as
update SHOPCART 
set  USER_ID= @USER_ID	
	,PRODUCT_ID=@PRODUCT_ID
where ID = @ID

--STORE DELETE SHOPCART
go
create proc DELETE_SHOPCART
(
@ID INT
)
as
delete
from SHOPCART
where ID=@ID

--STORE ALL SHOPCART

go
CREATE PROC ALL_SHOPCART
AS
 SELECT * FROM SHOPCART
 
 exec ALL_SHOPCART
---STORE ADD FEEDBACK
go
CREATE PROC ADD_FEEDBACK
(
@ID INT 
,@TITLE NVARCHAR(50)
,@DESCRIBE  NVARCHAR(50)
,@USER_ID INT 
)
as
INSERT INTO FEEDBACK
VALUES (@ID,@TITLE, @DESCRIBE,@USER_ID)

---STORE UPDATE FEEDBACK
go
create proc UPDATE_FEEDBACK
(
@ID INT 
,@TITLE NVARCHAR(50)
,@DESCRIBE  NVARCHAR(50)
,@USER_ID INT 
)
as
update FEEDBACK 
set  TITLE= @TITLE	
	,DESCRIBE=@DESCRIBE
	,USER_ID=@USER_ID
where ID = @ID

--STORE DELETE FEEDBACK
go
create proc DELETE_FEEDBACK
(
@ID INT
)
as
delete
from FEEDBACK
where ID=@ID

--STORED ALL FEEDBACK

go
CREATE PROC ALL_FEEDBACK
AS
 SELECT * FROM FEEDBACK
 
 exec ALL_FEEDBACK
